service: products-store

custom:
  tableName: 'products-table-${self:provider.stage}'
#  for offline usage only ---- START
  dynamodb:
    start:
      migrate: true
#  for offline usage only ---- FINISH
  secrets: ${file(secrets.json)}

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ProductsDynamoDBTable", "Arn" ] }
  environment:
    PRODUCTS_TABLE: ${self:custom.tableName}
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    DB: ${self:custom.secrets.DB}

functions:
  verify-token:
    handler: auth/VerifyToken.auth

  login:
    handler: auth/AuthHandler.login
    events:
      - http:
          path: login
          method: post
          cors: true

  register:
    handler: auth/AuthHandler.register
    events:
      - http:
          path: register
          method: post
          cors: true

  me:
    handler: auth/AuthHandler.me
    events:
      - http:
          path: me
          method: get
          cors: true
          authorizer: verify-token

  getUsers:
    handler: user/UserHandler.getUsers
    events:
      - http:
          path: users
          method: get
          cors: true

  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
    getProduct:
      handler: index.handler
      events:
        - http: 'GET /products/{proxy+}'
    createProduct:
      handler: index.handler
      events:
        - http: 'POST /products'

resources:
  Resources:
    ProductsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: productId
            AttributeType: S
        KeySchema:
          -
            AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}

plugins:
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list
